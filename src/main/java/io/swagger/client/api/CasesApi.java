/*
 * Open Legal Data API
 * With the Open Legal Data API you can access various data from the legal domain, e.g. law text or case files. The data may be used for semantic analysis or to create statistics. For more information visit our website. https://openlegaldata.io/
 *
 * OpenAPI spec version: v1
 * Contact: hello@openlegaldata.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.InlineResponse2004;
import io.swagger.client.model.ModelCase;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CasesApi {
    private ApiClient apiClient;

    public CasesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CasesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for casesCreate
     * @param data  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call casesCreateCall(ModelCase data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/cases/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call casesCreateValidateBeforeCall(ModelCase data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling casesCreate(Async)");
        }
        

        com.squareup.okhttp.Call call = casesCreateCall(data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List view for cases
     * @param data  (required)
     * @return ModelCase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelCase casesCreate(ModelCase data) throws ApiException {
        ApiResponse<ModelCase> resp = casesCreateWithHttpInfo(data);
        return resp.getData();
    }

    /**
     * 
     * List view for cases
     * @param data  (required)
     * @return ApiResponse&lt;ModelCase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelCase> casesCreateWithHttpInfo(ModelCase data) throws ApiException {
        com.squareup.okhttp.Call call = casesCreateValidateBeforeCall(data, null, null);
        Type localVarReturnType = new TypeToken<ModelCase>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List view for cases
     * @param data  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call casesCreateAsync(ModelCase data, final ApiCallback<ModelCase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = casesCreateValidateBeforeCall(data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelCase>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for casesDelete
     * @param id A unique integer value identifying this case. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call casesDeleteCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cases/{id}/"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call casesDeleteValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling casesDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = casesDeleteCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List view for cases
     * @param id A unique integer value identifying this case. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void casesDelete(Integer id) throws ApiException {
        casesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * List view for cases
     * @param id A unique integer value identifying this case. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> casesDeleteWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = casesDeleteValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * List view for cases
     * @param id A unique integer value identifying this case. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call casesDeleteAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = casesDeleteValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for casesList
     * @param ordering Which field to use when ordering the results. (optional)
     * @param date  (optional)
     * @param slug  (optional)
     * @param fileNumber  (optional)
     * @param ecli  (optional)
     * @param court  (optional)
     * @param courtSlug  (optional)
     * @param courtJurisdiction  (optional)
     * @param courtLevelOfAppeal  (optional)
     * @param courtState  (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call casesListCall(String ordering, String date, String slug, String fileNumber, String ecli, BigDecimal court, String courtSlug, String courtJurisdiction, String courtLevelOfAppeal, String courtState, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cases/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ordering != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ordering", ordering));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (slug != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("slug", slug));
        if (fileNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file_number", fileNumber));
        if (ecli != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ecli", ecli));
        if (court != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("court", court));
        if (courtSlug != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("court__slug", courtSlug));
        if (courtJurisdiction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("court__jurisdiction", courtJurisdiction));
        if (courtLevelOfAppeal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("court__level_of_appeal", courtLevelOfAppeal));
        if (courtState != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("court__state", courtState));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call casesListValidateBeforeCall(String ordering, String date, String slug, String fileNumber, String ecli, BigDecimal court, String courtSlug, String courtJurisdiction, String courtLevelOfAppeal, String courtState, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = casesListCall(ordering, date, slug, fileNumber, ecli, court, courtSlug, courtJurisdiction, courtLevelOfAppeal, courtState, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List view for cases
     * @param ordering Which field to use when ordering the results. (optional)
     * @param date  (optional)
     * @param slug  (optional)
     * @param fileNumber  (optional)
     * @param ecli  (optional)
     * @param court  (optional)
     * @param courtSlug  (optional)
     * @param courtJurisdiction  (optional)
     * @param courtLevelOfAppeal  (optional)
     * @param courtState  (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 casesList(String ordering, String date, String slug, String fileNumber, String ecli, BigDecimal court, String courtSlug, String courtJurisdiction, String courtLevelOfAppeal, String courtState, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<InlineResponse2003> resp = casesListWithHttpInfo(ordering, date, slug, fileNumber, ecli, court, courtSlug, courtJurisdiction, courtLevelOfAppeal, courtState, page, pageSize);
        return resp.getData();
    }

    /**
     * 
     * List view for cases
     * @param ordering Which field to use when ordering the results. (optional)
     * @param date  (optional)
     * @param slug  (optional)
     * @param fileNumber  (optional)
     * @param ecli  (optional)
     * @param court  (optional)
     * @param courtSlug  (optional)
     * @param courtJurisdiction  (optional)
     * @param courtLevelOfAppeal  (optional)
     * @param courtState  (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> casesListWithHttpInfo(String ordering, String date, String slug, String fileNumber, String ecli, BigDecimal court, String courtSlug, String courtJurisdiction, String courtLevelOfAppeal, String courtState, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = casesListValidateBeforeCall(ordering, date, slug, fileNumber, ecli, court, courtSlug, courtJurisdiction, courtLevelOfAppeal, courtState, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List view for cases
     * @param ordering Which field to use when ordering the results. (optional)
     * @param date  (optional)
     * @param slug  (optional)
     * @param fileNumber  (optional)
     * @param ecli  (optional)
     * @param court  (optional)
     * @param courtSlug  (optional)
     * @param courtJurisdiction  (optional)
     * @param courtLevelOfAppeal  (optional)
     * @param courtState  (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call casesListAsync(String ordering, String date, String slug, String fileNumber, String ecli, BigDecimal court, String courtSlug, String courtJurisdiction, String courtLevelOfAppeal, String courtState, Integer page, Integer pageSize, final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = casesListValidateBeforeCall(ordering, date, slug, fileNumber, ecli, court, courtSlug, courtJurisdiction, courtLevelOfAppeal, courtState, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for casesPartialUpdate
     * @param id A unique integer value identifying this case. (required)
     * @param data  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call casesPartialUpdateCall(Integer id, ModelCase data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/cases/{id}/"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call casesPartialUpdateValidateBeforeCall(Integer id, ModelCase data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling casesPartialUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling casesPartialUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = casesPartialUpdateCall(id, data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List view for cases
     * @param id A unique integer value identifying this case. (required)
     * @param data  (required)
     * @return ModelCase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelCase casesPartialUpdate(Integer id, ModelCase data) throws ApiException {
        ApiResponse<ModelCase> resp = casesPartialUpdateWithHttpInfo(id, data);
        return resp.getData();
    }

    /**
     * 
     * List view for cases
     * @param id A unique integer value identifying this case. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ModelCase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelCase> casesPartialUpdateWithHttpInfo(Integer id, ModelCase data) throws ApiException {
        com.squareup.okhttp.Call call = casesPartialUpdateValidateBeforeCall(id, data, null, null);
        Type localVarReturnType = new TypeToken<ModelCase>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List view for cases
     * @param id A unique integer value identifying this case. (required)
     * @param data  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call casesPartialUpdateAsync(Integer id, ModelCase data, final ApiCallback<ModelCase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = casesPartialUpdateValidateBeforeCall(id, data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelCase>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for casesRead
     * @param id A unique integer value identifying this case. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call casesReadCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cases/{id}/"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call casesReadValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling casesRead(Async)");
        }
        

        com.squareup.okhttp.Call call = casesReadCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List view for cases
     * @param id A unique integer value identifying this case. (required)
     * @return ModelCase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelCase casesRead(Integer id) throws ApiException {
        ApiResponse<ModelCase> resp = casesReadWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * List view for cases
     * @param id A unique integer value identifying this case. (required)
     * @return ApiResponse&lt;ModelCase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelCase> casesReadWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = casesReadValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<ModelCase>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List view for cases
     * @param id A unique integer value identifying this case. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call casesReadAsync(Integer id, final ApiCallback<ModelCase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = casesReadValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelCase>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for casesSearchList
     * @param text Search query on text content (Lucence syntax support). (required)
     * @param facetModelName facet_model_name (optional)
     * @param date date (optional)
     * @param courtJurisdiction court_jurisdiction (optional)
     * @param courtLevelOfAppeal court_level_of_appeal (optional)
     * @param decisionType decision_type (optional)
     * @param court court (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call casesSearchListCall(String text, String facetModelName, String date, String courtJurisdiction, String courtLevelOfAppeal, String decisionType, String court, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cases/search/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (facetModelName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("facet_model_name", facetModelName));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        if (courtJurisdiction != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("court_jurisdiction", courtJurisdiction));
        if (courtLevelOfAppeal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("court_level_of_appeal", courtLevelOfAppeal));
        if (decisionType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("decision_type", decisionType));
        if (court != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("court", court));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call casesSearchListValidateBeforeCall(String text, String facetModelName, String date, String courtJurisdiction, String courtLevelOfAppeal, String decisionType, String court, Integer page, Integer pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling casesSearchList(Async)");
        }
        

        com.squareup.okhttp.Call call = casesSearchListCall(text, facetModelName, date, courtJurisdiction, courtLevelOfAppeal, decisionType, court, page, pageSize, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Search view (list only)
     * @param text Search query on text content (Lucence syntax support). (required)
     * @param facetModelName facet_model_name (optional)
     * @param date date (optional)
     * @param courtJurisdiction court_jurisdiction (optional)
     * @param courtLevelOfAppeal court_level_of_appeal (optional)
     * @param decisionType decision_type (optional)
     * @param court court (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 casesSearchList(String text, String facetModelName, String date, String courtJurisdiction, String courtLevelOfAppeal, String decisionType, String court, Integer page, Integer pageSize) throws ApiException {
        ApiResponse<InlineResponse2004> resp = casesSearchListWithHttpInfo(text, facetModelName, date, courtJurisdiction, courtLevelOfAppeal, decisionType, court, page, pageSize);
        return resp.getData();
    }

    /**
     * 
     * Search view (list only)
     * @param text Search query on text content (Lucence syntax support). (required)
     * @param facetModelName facet_model_name (optional)
     * @param date date (optional)
     * @param courtJurisdiction court_jurisdiction (optional)
     * @param courtLevelOfAppeal court_level_of_appeal (optional)
     * @param decisionType decision_type (optional)
     * @param court court (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> casesSearchListWithHttpInfo(String text, String facetModelName, String date, String courtJurisdiction, String courtLevelOfAppeal, String decisionType, String court, Integer page, Integer pageSize) throws ApiException {
        com.squareup.okhttp.Call call = casesSearchListValidateBeforeCall(text, facetModelName, date, courtJurisdiction, courtLevelOfAppeal, decisionType, court, page, pageSize, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search view (list only)
     * @param text Search query on text content (Lucence syntax support). (required)
     * @param facetModelName facet_model_name (optional)
     * @param date date (optional)
     * @param courtJurisdiction court_jurisdiction (optional)
     * @param courtLevelOfAppeal court_level_of_appeal (optional)
     * @param decisionType decision_type (optional)
     * @param court court (optional)
     * @param page A page number within the paginated result set. (optional)
     * @param pageSize Number of results to return per page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call casesSearchListAsync(String text, String facetModelName, String date, String courtJurisdiction, String courtLevelOfAppeal, String decisionType, String court, Integer page, Integer pageSize, final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = casesSearchListValidateBeforeCall(text, facetModelName, date, courtJurisdiction, courtLevelOfAppeal, decisionType, court, page, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for casesUpdate
     * @param id A unique integer value identifying this case. (required)
     * @param data  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call casesUpdateCall(Integer id, ModelCase data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/cases/{id}/"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call casesUpdateValidateBeforeCall(Integer id, ModelCase data, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling casesUpdate(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling casesUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = casesUpdateCall(id, data, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * List view for cases
     * @param id A unique integer value identifying this case. (required)
     * @param data  (required)
     * @return ModelCase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelCase casesUpdate(Integer id, ModelCase data) throws ApiException {
        ApiResponse<ModelCase> resp = casesUpdateWithHttpInfo(id, data);
        return resp.getData();
    }

    /**
     * 
     * List view for cases
     * @param id A unique integer value identifying this case. (required)
     * @param data  (required)
     * @return ApiResponse&lt;ModelCase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelCase> casesUpdateWithHttpInfo(Integer id, ModelCase data) throws ApiException {
        com.squareup.okhttp.Call call = casesUpdateValidateBeforeCall(id, data, null, null);
        Type localVarReturnType = new TypeToken<ModelCase>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List view for cases
     * @param id A unique integer value identifying this case. (required)
     * @param data  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call casesUpdateAsync(Integer id, ModelCase data, final ApiCallback<ModelCase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = casesUpdateValidateBeforeCall(id, data, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelCase>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

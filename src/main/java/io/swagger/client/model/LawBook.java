/*
 * Open Legal Data API
 * With the Open Legal Data API you can access various data from the legal domain, e.g. law text or case files. The data may be used for semantic analysis or to create statistics. For more information visit our website. https://openlegaldata.io/
 *
 * OpenAPI spec version: v1
 * Contact: hello@openlegaldata.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.LocalDate;

/**
 * LawBook
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-18T15:11:46.584Z")
public class LawBook {
  @SerializedName("code")
  private String code = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("revision_date")
  private LocalDate revisionDate = null;

  @SerializedName("latest")
  private Boolean latest = null;

  public LawBook code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Book code (usually short title)
   * @return code
  **/
  @ApiModelProperty(required = true, value = "Book code (usually short title)")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public LawBook title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Full title of the book
   * @return title
  **/
  @ApiModelProperty(value = "Full title of the book")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public LawBook revisionDate(LocalDate revisionDate) {
    this.revisionDate = revisionDate;
    return this;
  }

   /**
   * Date of revision
   * @return revisionDate
  **/
  @ApiModelProperty(value = "Date of revision")
  public LocalDate getRevisionDate() {
    return revisionDate;
  }

  public void setRevisionDate(LocalDate revisionDate) {
    this.revisionDate = revisionDate;
  }

  public LawBook latest(Boolean latest) {
    this.latest = latest;
    return this;
  }

   /**
   * Is true if this is the latest revision of this book
   * @return latest
  **/
  @ApiModelProperty(value = "Is true if this is the latest revision of this book")
  public Boolean isLatest() {
    return latest;
  }

  public void setLatest(Boolean latest) {
    this.latest = latest;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LawBook lawBook = (LawBook) o;
    return Objects.equals(this.code, lawBook.code) &&
        Objects.equals(this.title, lawBook.title) &&
        Objects.equals(this.revisionDate, lawBook.revisionDate) &&
        Objects.equals(this.latest, lawBook.latest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, title, revisionDate, latest);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LawBook {\n");
    
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    revisionDate: ").append(toIndentedString(revisionDate)).append("\n");
    sb.append("    latest: ").append(toIndentedString(latest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


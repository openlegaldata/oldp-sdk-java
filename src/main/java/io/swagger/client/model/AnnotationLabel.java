/*
 * Open Legal Data API
 * With the Open Legal Data API you can access various data from the legal domain, e.g. law text or case files. The data may be used for semantic analysis or to create statistics. For more information visit our website. https://openlegaldata.io/
 *
 * OpenAPI spec version: v1
 * Contact: hello@openlegaldata.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * AnnotationLabel
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-18T15:11:46.584Z")
public class AnnotationLabel {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("owner")
  private String owner = null;

  @SerializedName("trusted")
  private String trusted = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("slug")
  private String slug = null;

  @SerializedName("private")
  private Boolean _private = null;

  @SerializedName("many_annotations_per_label")
  private Boolean manyAnnotationsPerLabel = null;

  @SerializedName("use_marker")
  private Boolean useMarker = null;

  /**
   * Annotation values must be in this data type
   */
  @JsonAdapter(AnnotationValueTypeEnum.Adapter.class)
  public enum AnnotationValueTypeEnum {
    STR("str"),
    
    INT("int");

    private String value;

    AnnotationValueTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnnotationValueTypeEnum fromValue(String text) {
      for (AnnotationValueTypeEnum b : AnnotationValueTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AnnotationValueTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnnotationValueTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnnotationValueTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AnnotationValueTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("annotation_value_type")
  private AnnotationValueTypeEnum annotationValueType = null;

  @SerializedName("color")
  private String color = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Integer getId() {
    return id;
  }

   /**
   * Get owner
   * @return owner
  **/
  @ApiModelProperty(value = "")
  public String getOwner() {
    return owner;
  }

   /**
   * Get trusted
   * @return trusted
  **/
  @ApiModelProperty(value = "")
  public String getTrusted() {
    return trusted;
  }

  public AnnotationLabel name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Verbose name, e.g. This Awesome annotation
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Verbose name, e.g. This Awesome annotation")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public AnnotationLabel slug(String slug) {
    this.slug = slug;
    return this;
  }

   /**
   * Identifier, e.g. this-awesome-annotation
   * @return slug
  **/
  @ApiModelProperty(required = true, value = "Identifier, e.g. this-awesome-annotation")
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }

  public AnnotationLabel _private(Boolean _private) {
    this._private = _private;
    return this;
  }

   /**
   * Private annotations are only visible to its author
   * @return _private
  **/
  @ApiModelProperty(value = "Private annotations are only visible to its author")
  public Boolean isPrivate() {
    return _private;
  }

  public void setPrivate(Boolean _private) {
    this._private = _private;
  }

  public AnnotationLabel manyAnnotationsPerLabel(Boolean manyAnnotationsPerLabel) {
    this.manyAnnotationsPerLabel = manyAnnotationsPerLabel;
    return this;
  }

   /**
   * A content object can have more than one annotation per label
   * @return manyAnnotationsPerLabel
  **/
  @ApiModelProperty(value = "A content object can have more than one annotation per label")
  public Boolean isManyAnnotationsPerLabel() {
    return manyAnnotationsPerLabel;
  }

  public void setManyAnnotationsPerLabel(Boolean manyAnnotationsPerLabel) {
    this.manyAnnotationsPerLabel = manyAnnotationsPerLabel;
  }

  public AnnotationLabel useMarker(Boolean useMarker) {
    this.useMarker = useMarker;
    return this;
  }

   /**
   * Marker annotations are extracted from the text content and have a position in the text
   * @return useMarker
  **/
  @ApiModelProperty(value = "Marker annotations are extracted from the text content and have a position in the text")
  public Boolean isUseMarker() {
    return useMarker;
  }

  public void setUseMarker(Boolean useMarker) {
    this.useMarker = useMarker;
  }

  public AnnotationLabel annotationValueType(AnnotationValueTypeEnum annotationValueType) {
    this.annotationValueType = annotationValueType;
    return this;
  }

   /**
   * Annotation values must be in this data type
   * @return annotationValueType
  **/
  @ApiModelProperty(value = "Annotation values must be in this data type")
  public AnnotationValueTypeEnum getAnnotationValueType() {
    return annotationValueType;
  }

  public void setAnnotationValueType(AnnotationValueTypeEnum annotationValueType) {
    this.annotationValueType = annotationValueType;
  }

  public AnnotationLabel color(String color) {
    this.color = color;
    return this;
  }

   /**
   * Get color
   * @return color
  **/
  @ApiModelProperty(value = "")
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }

   /**
   * Entry is created at this date time
   * @return createdAt
  **/
  @ApiModelProperty(value = "Entry is created at this date time")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

   /**
   * Date time of last change
   * @return updatedAt
  **/
  @ApiModelProperty(value = "Date time of last change")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnnotationLabel annotationLabel = (AnnotationLabel) o;
    return Objects.equals(this.id, annotationLabel.id) &&
        Objects.equals(this.owner, annotationLabel.owner) &&
        Objects.equals(this.trusted, annotationLabel.trusted) &&
        Objects.equals(this.name, annotationLabel.name) &&
        Objects.equals(this.slug, annotationLabel.slug) &&
        Objects.equals(this._private, annotationLabel._private) &&
        Objects.equals(this.manyAnnotationsPerLabel, annotationLabel.manyAnnotationsPerLabel) &&
        Objects.equals(this.useMarker, annotationLabel.useMarker) &&
        Objects.equals(this.annotationValueType, annotationLabel.annotationValueType) &&
        Objects.equals(this.color, annotationLabel.color) &&
        Objects.equals(this.createdAt, annotationLabel.createdAt) &&
        Objects.equals(this.updatedAt, annotationLabel.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, owner, trusted, name, slug, _private, manyAnnotationsPerLabel, useMarker, annotationValueType, color, createdAt, updatedAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnnotationLabel {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    trusted: ").append(toIndentedString(trusted)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    manyAnnotationsPerLabel: ").append(toIndentedString(manyAnnotationsPerLabel)).append("\n");
    sb.append("    useMarker: ").append(toIndentedString(useMarker)).append("\n");
    sb.append("    annotationValueType: ").append(toIndentedString(annotationValueType)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

